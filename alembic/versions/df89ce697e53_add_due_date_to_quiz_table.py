"""add due_date to quiz table

Revision ID: df89ce697e53
Revises: 
Create Date: 2025-06-18 08:53:04.867737

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'df89ce697e53'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('notification')
    op.drop_table('payment')
    op.drop_table('videowatch')
    op.drop_table('bankaccount')
    op.drop_index(op.f('ix_passwordreset_user_id'), table_name='passwordreset')
    op.drop_table('passwordreset')
    op.alter_column('assignmentsubmission', 'feedback',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('course', 'price',
               existing_type=sa.NUMERIC(),
               type_=sa.Float(),
               nullable=False,
               existing_server_default=sa.text('0.0'))
    op.alter_column('course', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('course', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('course', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'active'::character varying"))
    op.drop_index(op.f('idx_course_created_at'), table_name='course')
    op.drop_index(op.f('idx_course_status'), table_name='course')
    op.drop_constraint(op.f('course_preview_video_id_fkey'), 'course', type_='foreignkey')
    op.create_foreign_key(None, 'course', 'video', ['preview_video_id'], ['id'], ondelete='SET NULL')
    op.alter_column('courseprogress', 'completed',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('courseprogress', 'progress_percentage',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('enrollment', 'user_id',
               existing_type=sa.UUID(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('enrollment', 'course_id',
               existing_type=sa.UUID(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('enrollment', 'is_accessible',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('idx_enrollment_expiration'), table_name='enrollment')
    op.drop_column('enrollment', 'is_expired')
    op.add_column('quiz', sa.Column('due_date', sa.DateTime(), nullable=True))
    op.drop_constraint(op.f('video_course_id_fkey'), 'video', type_='foreignkey')
    op.create_foreign_key(None, 'video', 'course', ['course_id'], ['id'])
    op.alter_column('videoprogress', 'completed',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('videoprogress', 'completed',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_constraint(None, 'video', type_='foreignkey')
    op.create_foreign_key(op.f('video_course_id_fkey'), 'video', 'course', ['course_id'], ['id'], ondelete='CASCADE')
    op.drop_column('quiz', 'due_date')
    op.add_column('enrollment', sa.Column('is_expired', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_enrollment_expiration'), 'enrollment', ['expiration_date', 'is_expired', 'is_accessible'], unique=False)
    op.alter_column('enrollment', 'is_accessible',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('enrollment', 'course_id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('enrollment', 'user_id',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('courseprogress', 'progress_percentage',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('courseprogress', 'completed',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_constraint(None, 'course', type_='foreignkey')
    op.create_foreign_key(op.f('course_preview_video_id_fkey'), 'course', 'video', ['preview_video_id'], ['id'])
    op.create_index(op.f('idx_course_status'), 'course', ['status'], unique=False)
    op.create_index(op.f('idx_course_created_at'), 'course', ['created_at'], unique=False)
    op.alter_column('course', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('course', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('course', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('course', 'price',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               nullable=True,
               existing_server_default=sa.text('0.0'))
    op.alter_column('assignmentsubmission', 'feedback',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.create_table('passwordreset',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('pin', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('passwordreset_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('passwordreset_pkey'))
    )
    op.create_index(op.f('ix_passwordreset_user_id'), 'passwordreset', ['user_id'], unique=False)
    op.create_table('bankaccount',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('account_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('account_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bank_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('bankaccount_pkey'))
    )
    op.create_table('videowatch',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('video_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('student_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('watched_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['student_id'], ['user.id'], name=op.f('videowatch_student_id_fkey')),
    sa.ForeignKeyConstraint(['video_id'], ['video.id'], name=op.f('videowatch_video_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('videowatch_pkey'))
    )
    op.create_table('payment',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('enrollment_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('initiated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollment.id'], name=op.f('payment_enrollment_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('payment_pkey'))
    )
    op.create_table('notification',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('details', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_pkey'))
    )
    # ### end Alembic commands ###
